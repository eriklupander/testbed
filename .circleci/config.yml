version: 2 # use CircleCI 2.0
jobs: # basic units of work in a run
  build: # runs not using Workflows must have a `build` job as entry point
    docker: # run the steps with Docker
    # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
    - image: circleci/golang:1.11.2 #

    # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/postgres/
    - image: circleci/postgres:9.6-alpine

      # environment variables for primary container
      environment:
        POSTGRES_USER: testbed
        POSTGRES_DB: testbed_test

    # environment variables for the build itself
    environment:
      GO111MODULE: "on" # Enable go 1.11 modules support
      TEST_RESULTS: /tmp/test-results # path to where test results will be saved


    # steps that comprise the `build` job
    steps:
    - checkout # check out source code to working directory
    - run: mkdir -p $TEST_RESULTS # create the test results directory

    - restore_cache: # restores saved cache if no changes are detected since last run
        keys:
        - go-mod-v1-{{ checksum "go.sum" }}

    # Normally, this step would be in a custom primary image;
    # we've added it here for the sake of explanation.
    # - run: go get github.com/jstemmer/go-junit-report

    # Code quality checks
    - run:
        name: Run go vet
        command: |
          make vet 2>&1 | tee ${TEST_RESULTS}/go-vet.out

    #  CircleCi's Go Docker image includes netcat
    #  This allows polling the DB port to confirm it is open before proceeding
    - run:
        name: Waiting for Postgres to be ready
        command: |
          for i in `seq 1 10`;
          do
            nc -z localhost 5432 && echo Success && exit 0
            echo -n .
            sleep 1
          done
          echo Failed waiting for Postgres && exit 1

    # - run:
    #    name: Run unit tests
    #    # Store the results of our tests in the $TEST_RESULTS directory
    #    command: |
    #      trap "go-junit-report <${TEST_RESULTS}/go-test.out > ${TEST_RESULTS}/go-test-report.xml" EXIT
    #      make test | tee ${TEST_RESULTS}/go-test.out

    - run:
        name: Run unit tests GoConvey-style
        # Store the results of our tests in the $TEST_RESULTS directory
        command: |
          make test | tee ${TEST_RESULTS}/go-test.out


    - run:
        name: Run integration tests
        environment: # environment variables for the database url
          DB_URL: "postgres://testbed@localhost:5432/testbed_test?sslmode=disable"
        # Store the results of our tests in the $TEST_RESULTS directory
        # trap "go-junit-report <${TEST_RESULTS}/go-integrationtest.out > ${TEST_RESULTS}/go-integrationtest-report.xml" EXIT
        # make integrationtest | tee ${TEST_RESULTS}/go-integrationtest.out
        command: |
          make integrationtest | tee ${TEST_RESULTS}/go-integrationtest.out

    - run: make build # pull and build dependencies for the project

    - save_cache: # Store cache in the /go/pkg directory
        key: go-mod-v1-{{ checksum "go.sum" }}
        paths:
          - "/go/pkg/mod"

    - run:
        name: Start service
        environment:
          DB_URL: "postgres://testbed@localhost:5432/testbed_test?sslmode=disable"
        command: ./dist/testbed
        background: true # keep service running and proceed to next step

    - run:
        name: Validate service is working
        command: |
          sleep 5
          curl --retry 10 --retry-delay 1 -X GET http://localhost:8080/health

    - run:
        name: Run E2E tests
        environment: # environment variables for the database url
          DB_URL: "postgres://testbed@localhost:5432/testbed_test?sslmode=disable"
        # Store the results of our tests in the $TEST_RESULTS directory
        # trap "go-junit-report <${TEST_RESULTS}/go-e2etest.out > ${TEST_RESULTS}/go-e2etest-report.xml" EXIT
        command: |
          make e2etest | tee ${TEST_RESULTS}/go-e2etest.out

    - store_artifacts: # Upload test summary for display in Artifacts
        path: /tmp/test-results
        destination: raw-test-output

    - store_test_results: # Upload test results for display in Test Summary
        path: /tmp/test-results

    - run:
        name: Build docker image
        command: |
          docker build -t eriklupander/testbed:$CIRCLE_BRANCH .
